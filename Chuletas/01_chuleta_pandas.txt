# ==========================================================
# üß† CHULETA COMPLETA DE PANDAS PARA FINANZAS Y QUANTS
# ==========================================================
# Explicada l√≠nea a l√≠nea para aprender no solo el ‚Äúc√≥mo‚Äù sino el ‚Äúpor qu√©‚Äù.
# Usa este archivo como referencia para an√°lisis financieros, trading y data science.

# ==============================
# 1Ô∏è‚É£ Importar librer√≠as
# ==============================
import pandas as pd                   # Librer√≠a principal para an√°lisis de datos (tablas, series temporales)
import numpy as np                    # Para c√°lculos matem√°ticos y estad√≠sticos
import matplotlib.pyplot as plt       # Para crear gr√°ficos
import yfinance as yf                 # Permite descargar datos financieros hist√≥ricos (acciones, √≠ndices, etc.)

# ==============================
# 2Ô∏è‚É£ Lectura y escritura de datos
# ==============================
# Importar datos desde archivos CSV o Excel, algo muy com√∫n en finanzas (precios, balances, etc.)
df = pd.read_csv("archivo.csv", index_col="Date", parse_dates=True)      # index_col y parse_dates convierten fechas en √≠ndice temporal
df = pd.read_excel("archivo.xlsx", sheet_name="Hoja1", index_col="Date") # Leer datos desde Excel
df.to_csv("nuevo_archivo.csv")                                           # Guardar DataFrame a CSV
df.to_excel("nuevo_archivo.xlsx")                                        # Guardar a Excel

# ==============================
# 3Ô∏è‚É£ Selecci√≥n y filtrado
# ==============================
# Acceder a columnas, filas o aplicar filtros
df['Close']                             # Selecciona una sola columna (Serie)
df[['Open','Close']]                    # Selecciona m√∫ltiples columnas
df.loc['2025-01-01']                    # Accede a fila por etiqueta (fecha espec√≠fica)
df.iloc[0]                              # Accede a la primera fila (posici√≥n 0)
df[df['Close'] > 100]                   # Filtra las filas donde el precio de cierre > 100
df[(df['Close']>100) & (df['Volume']>1000)]  # Filtros combinados con condiciones l√≥gicas

# ==============================
# 4Ô∏è‚É£ Operaciones b√°sicas y estad√≠sticas
# ==============================
# Estas funciones permiten conocer el comportamiento general de una serie de datos financieros
df['Close'].mean()        # Media ‚Üí precio promedio
df['Close'].std()         # Desviaci√≥n est√°ndar ‚Üí mide la volatilidad
df['Close'].var()         # Varianza ‚Üí cuadrado de la volatilidad
df['Close'].min()         # Precio m√≠nimo
df['Close'].max()         # Precio m√°ximo
df['Close'].median()      # Mediana ‚Üí valor central
df['Close'].quantile(0.25) # Primer cuartil ‚Üí indica el 25% inferior de los datos
df.describe()             # Resumen estad√≠stico general

# Retornos (ganancias/p√©rdidas)
df['Return'] = df['Close'].pct_change()                      # Retorno simple (porcentaje de cambio entre d√≠as)
df['LogReturn'] = np.log(df['Close'] / df['Close'].shift(1)) # Retorno logar√≠tmico ‚Üí mejor para an√°lisis estad√≠stico (se suman f√°cilmente)

# ==============================
# 5Ô∏è‚É£ Series temporales y resampling
# ==============================
# En finanzas los datos se agrupan por tiempo: d√≠as, semanas, meses, etc.
df.index = pd.to_datetime(df.index)   # Asegura que el √≠ndice sea de tipo datetime
df.resample('M').mean()               # Promedio mensual (√∫til para ver tendencias)
df.resample('W').sum()                # Suma semanal (por ejemplo, volumen total)
df['Close'].rolling(window=20).mean() # Media m√≥vil de 20 d√≠as ‚Üí suaviza los datos
df['Close'].rolling(20).std()         # Desviaci√≥n m√≥vil de 20 d√≠as ‚Üí mide volatilidad local

# ==============================
# 6Ô∏è‚É£ Retorno y riesgo (finanzas)
# ==============================
# M√©tricas b√°sicas de performance y riesgo en un activo financiero
df['Return'] = df['Close'].pct_change()
df['Return'].mean()      # Retorno promedio ‚Üí mide la rentabilidad esperada
df['Return'].std()       # Volatilidad ‚Üí mide el riesgo
df['Return'].skew()      # Asimetr√≠a ‚Üí mide si hay m√°s ca√≠das o subidas extremas
df['Return'].kurt()      # Curtosis ‚Üí mide la probabilidad de eventos extremos (colas gruesas)

# Ratio de Sharpe ‚Üí mide la rentabilidad ajustada por riesgo
# Cuanto m√°s alto, mejor (‚âà superior a 1 es bueno, >2 excelente)
sharpe = df['Return'].mean() / df['Return'].std() * np.sqrt(252)  # 252 d√≠as de mercado al a√±o

# Correlaci√≥n y covarianza ‚Üí √∫tiles para diversificar carteras
df[['AAPL','MSFT']].pct_change().corr()  # Relaci√≥n lineal entre retornos
df[['AAPL','MSFT']].pct_change().cov()   # Covarianza ‚Üí mide co-movimiento

# ==============================
# 7Ô∏è‚É£ Manejo de datos
# ==============================
# Limpieza y preparaci√≥n de datos antes del an√°lisis
df.isna().sum()                            # Detectar valores faltantes (NaN)
df.dropna(inplace=True)                    # Eliminar filas con NaN
df.fillna(method='ffill', inplace=True)    # Rellenar NaN hacia adelante (mantiene continuidad temporal)
df.rename(columns={'Close':'PrecioCierre'}, inplace=True)  # Renombrar columnas
df['High-Low'] = df['High'] - df['Low']   # Nueva columna ‚Üí rango diario
df.sort_values(by='Close', ascending=False) # Ordenar por precio de cierre

# ==============================
# 8Ô∏è‚É£ Operaciones avanzadas √∫tiles para Quant
# ==============================
# C√°lculos usados en trading algor√≠tmico y modelado financiero
df['CumReturn'] = (1 + df['Return']).cumprod() - 1  # Retorno acumulado total desde inicio
df['LogClose'] = np.log(df['Close'])                # Precio en escala logar√≠tmica ‚Üí suaviza tendencias
df['Normalized'] = df['Close'] / df['Close'].iloc[0] # Normaliza precios para comparar activos
df['Volatility_20'] = df['Return'].rolling(20).apply(lambda x: np.std(x), raw=True)  # Volatilidad m√≥vil de 20 d√≠as

# ==============================
# 9Ô∏è‚É£ Visualizaci√≥n r√°pida
# ==============================
# Gr√°ficos b√°sicos para interpretar los datos visualmente
df['Close'].plot(figsize=(12,6), title="Precio de Cierre")
plt.show()

df['Return'].hist(bins=50, figsize=(10,5))  # Histograma de retornos ‚Üí distribuci√≥n del riesgo
plt.title("Distribuci√≥n de Retornos")
plt.show()

# Comparaci√≥n entre precio real y media m√≥vil
df['Close'].plot(label='Precio Cierre', figsize=(12,6))
df['Close'].rolling(20).mean().plot(label='Media M√≥vil 20 d√≠as')
plt.legend()
plt.title("Precio vs Media M√≥vil")
plt.show()

# ==============================
# üîü Extra: Conectar con Yahoo Finance
# ==============================
# Para obtener datos reales de mercado sin pagar APIs
tickers = ['AAPL','MSFT','GOOG']  # Lista de activos (Apple, Microsoft, Google)
data = yf.download(tickers, start='2023-01-01', end='2025-01-01')['Close']  # Descarga precios diarios
returns = data.pct_change()  # Calcula retornos diarios
returns.corr()               # Matriz de correlaci√≥n ‚Üí c√≥mo se mueven juntos los activos

üß© RESUMEN FINAL:
Pandas = manipular datos
NumPy = c√°lculos matem√°ticos
Matplotlib = visualizaci√≥n
yFinance = conexi√≥n con datos reales
Retornos y volatilidad = coraz√≥n del an√°lisis financiero
Resampling y rolling windows = an√°lisis temporal
Sharpe, correlaci√≥n, varianza = m√©tricas de riesgo/rendimiento
